// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;

import org.photonvision.PhotonCamera;

import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.XboxController.Axis;
import edu.wpi.first.wpilibj.XboxController.Button;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.button.POVButton;
import edu.wpi.first.wpilibj2.command.button.Trigger;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  // The robot's subsystems
  public final PowerManagment m_powerManagment = new PowerManagment();

  // public final SwerveModule m_swerveModule_fr = new
  // SwerveModule("fr",10,1,2,303.0+45);
  // public final SwerveModule m_swerveModule_fl = new
  // SwerveModule("fl",11,3,4,358 + 315);
  // public final SwerveModule m_swerveModule_br = new
  // SwerveModule("br",12,5,6,242.0 + 135);
  // public final SwerveModule m_swerveModule_bl = new
  // SwerveModule("bl",13,7,8,187.0 + 225);

  public SwerveDrive swerveDrive = new SwerveDrive();
  public boolean aDown = false;

  // Joysticks

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  private double rumble = 0;
  public SwerveController drive_robot;

  public XboxController m_xbox_cotroller = new XboxController(0);
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems

    // SmartDashboard Buttons
    // SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    // SmartDashboard.putData("TestTurnMotor", new TestTurnMotor( m_swerveModule ));
    // SmartDashboard.putData("TestDriveMotor", new TestDriveMotor( m_swerveModule
    // ));
    // SmartDashboard.putData("TestBothMotors", new TestBothMotors( m_swerveModule
    // ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    
    // Configure autonomous sendable chooser
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Balance", new balance(swerveDrive));
    m_chooser.addOption("VisionTesting", new AutonomousCommand(swerveDrive));
    m_chooser.addOption("Balance_alt", new balance_alt(swerveDrive));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }
  public SwerveDrive getSwerve(){
    return swerveDrive;
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
    drive_robot = new SwerveController(swerveDrive,
        () -> {
          return -m_xbox_cotroller.getLeftY();
        },
        () -> {
          return -m_xbox_cotroller.getLeftX();
        },
        () -> {
          return -m_xbox_cotroller.getRightX();
        });

    new JoystickButton(m_xbox_cotroller, Button.kA.value)
        .whenPressed(
          () -> {
            swerveDrive.setLocked(true);
          }
        )
        .whenReleased(
          () -> {
            swerveDrive.setLocked(false);
          }
        );
    new JoystickButton(m_xbox_cotroller, Button.kY.value)
          .whenPressed(()->{
              SwerveDrive.headless = !SwerveDrive.headless;
              System.out.println(SwerveDrive.headless);
          });
    
    new JoystickButton(m_xbox_cotroller, Button.kX.value)
          .whileHeld(()->{
            if(rumble < 0.075 && rumble > -0.1) {
              m_xbox_cotroller.setRumble(RumbleType.kBothRumble, rumble);
              rumble += 0.001;
            } else {
              if(rumble > -1) swerveDrive.m_gyro.zeroYaw();
              rumble = -1;
              m_xbox_cotroller.setRumble(RumbleType.kBothRumble, 0);
              
            }
          })
          .whenReleased(()->{
            m_xbox_cotroller.setRumble(RumbleType.kBothRumble, 0);
            rumble = 0;
          });
    
    new JoystickButton(m_xbox_cotroller, Button.kB.value)
          .whileHeld(()->{
            if(1 - m_xbox_cotroller.getRightTriggerAxis() < 1) {
              Constants.speedDampener = 1 - m_xbox_cotroller.getRightTriggerAxis();
            } else {
              Constants.speedDampener = 1;
            }
            System.out.println( Constants.speedDampener);
          });
        new JoystickButton(m_xbox_cotroller, Button.kLeftBumper.value)
          .whileTrue(new TurnToObject(swerveDrive));
          
      new JoystickButton(m_xbox_cotroller, Button.kRightBumper.value).whileTrue(new TargetAlign(swerveDrive));
      new JoystickButton(m_xbox_cotroller, Button.kBack.value).onTrue(new VisionDistance(swerveDrive, 1)); //window button (two rectangles)
    // This command schedules the drive_robot method
    // *** Makes the robot run *** 
    swerveDrive.setDefaultCommand(drive_robot);

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    // Create some buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS

  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */

    
  
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }

}
