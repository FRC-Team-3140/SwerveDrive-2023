// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.SwerveDrive;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class balance extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    SwerveDrive m_drive;
    boolean hasTilted;
    float balanceTime = 0;

    public balance(SwerveDrive swerveDrive) {
        m_drive = swerveDrive;
        addRequirements(swerveDrive);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // m_subsystem = subsystem;
        // addRequirements(m_subsystem);    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        hasTilted = false;
        m_drive.setLocked(false);
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {

        m_drive.setChassisSpeeds(hasTilted ? calculateSpeed(SwerveDrive.m_gyro.getPitch()) : 0.1, calculateSpeed(SwerveDrive.m_gyro.getRoll()), 0);
        if (!(Math.abs(SwerveDrive.m_gyro.getPitch()) <= 5 && Math.abs(SwerveDrive.m_gyro.getRoll()) <= 5)) {
            hasTilted = true;
            balanceTime = 0;
        } else {
            balanceTime += 1;
        }
    }
    public double calculateSpeed(double angle){
        if (Math.abs(angle) < 5) {
            return 0;
        }
        return Math.copySign(0.1, angle);

        //return (angle /1800);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_drive.setLocked(true);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        
        return balanceTime >= 50 && hasTilted;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
