// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.
/*
-LEDs attached
-Camera (on the top for the driver), and on the drivers station
-Pressure gauge 
-
*/
package frc.robot;

import java.util.function.BooleanSupplier;

import frc.robot.commands.TurnAndDrive;
import frc.robot.commands.Balance.BalanceAndEngage;
import frc.robot.commands.Balance.BalanceTogether;
import frc.robot.commands.Balance.ClimbRamp;
import frc.robot.commands.Balance.MoveToRamp;
import frc.robot.commands.Balance.ResetNavigation;
import frc.robot.commands.Drivetrain.EncoderDriveDistance;
import frc.robot.commands.Drivetrain.SwerveController;
import frc.robot.subsystems.*;
import frc.robot.subsystems.Arm.Arm;
import frc.robot.subsystems.Arm.Claw;
import frc.robot.subsystems.Arm.Wrist;
import frc.robot.subsystems.Swerve.SwerveDrive;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.XboxController.Button;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.RunCommand;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.button.Trigger;
import frc.robot.commands.auto.AllAuto;
import frc.robot.commands.auto.DoNothingAuto;
import frc.robot.commands.auto.EverythingAuto;
import frc.robot.commands.auto.MobilityAuto;
import frc.robot.commands.auto.OneCubeAuto;
import frc.robot.commands.auto.TwoCubeAuto;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {
  private LED led = new LED();
  private static DigitalInput limitSwitchUpper = new DigitalInput(3);
  private static DigitalInput limitSwitchLower = new DigitalInput(2);
  private static DigitalInput limitSwitchWrist = new DigitalInput(4);

  private static RobotContainer m_robotContainer = new RobotContainer();

  public static DigitalInput getLimitSwitchUper() {
    return limitSwitchUpper;

  }

  public static DigitalInput getLimitSwitchLower() {
    return limitSwitchLower;
  }

  public static DigitalInput getlimitSwitchWrist() {
    return limitSwitchWrist;
  }
  // public void updateNavX() {
  // // System.out.println("Update NAVX");
  // DataNAVX.getEntry("navx_yaw").setNumber(NAVX.getYaw());
  // DataNAVX.getEntry("navx_pitch").setNumber(NAVX.getPitch());
  // DataNAVX.getEntry("navx_roll").setNumber(NAVX.getRoll());
  // DataNAVX.getEntry("navx_compass").setNumber(NAVX.getCompassHeading());

  // DataNAVX.getEntry("navx_gyrox").setNumber(NAVX.getRawGyroX());
  // DataNAVX.getEntry("navx_gyroy").setNumber(NAVX.getRawGyroY());
  // DataNAVX.getEntry("navx_gyroz").setNumber(NAVX.getRawGyroZ());

  // double filtered_roll = angle_filter.calculate(NAVX.getRoll());
  // DataNAVX.getEntry("navx_filtered_roll").setNumber(filtered_roll);

  // double pitch_change = Math.abs(50.0 * (filtered_roll - m_last_roll)); //
  // Estimate the pitch change per second
  // m_last_roll = filtered_roll;

  // DataNAVX.getEntry("navx_pitch_change").setNumber(pitch_change);

  // }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  // The robot's subsystems
  public final PowerManagment m_powerManagment = new PowerManagment();

  // public final SwerveModule m_swerveModule_fr = new
  // SwerveModule("fr",10,1,2,303.0+45);
  // public final SwerveModule m_swerveModule_fl = new
  // SwerveModule("fl",11,3,4,358 + 315);
  // public final SwerveModule m_swerveModule_br = new
  // SwerveModule("br",12,5,6,242.0 + 135);
  // public final SwerveModule m_swerveModule_bl = new
  // SwerveModule("bl",13,7,8,187.0 + 225);

  public SwerveDrive swerveDrive = new SwerveDrive();
  public SwerveOdometer swerveOdometer = new SwerveOdometer(swerveDrive);

  public boolean aDown = false;

  public Claw claw = new Claw(2, 0, 1);

  // Joysticks

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  private double rumble = 0;
  public SwerveController drive_robot;

  public XboxController m_xbox_cotroller = new XboxController(0);
  public XboxController m_xbox_cotroller_2 = new XboxController(1);
  public Arm arm = new Arm(10);
  public Wrist wrist = new Wrist(9);

  private final NetworkTable swerve_table;
  private final NetworkTableEntry speedDampening;

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {
    swerve_table = NetworkTableInstance.getDefault().getTable("swerve_chassis");
    speedDampening = swerve_table.getEntry("speed_dampening");
    // // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems

    // SmartDashboard Buttons
    // SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    // SmartDashboard.putData("TestTurnMotor", new TestTurnMotor( m_swerveModule ));
    // SmartDashboard.putData("TestDriveMotor", new TestDriveMotor( m_swerveModule
    // ));
    // SmartDashboard.putData("TestBothMotors", new TestBothMotors( m_swerveModule
    // ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.addOption("Ported Balance", new BalanceTogether(swerveDrive));
    m_chooser.addOption("Do Nothing Auto", new DoNothingAuto());
    m_chooser.addOption("One Cube Auto ", new OneCubeAuto(swerveDrive, claw, arm, wrist, SwerveDrive.headless));


    m_chooser.addOption("Everything", new AllAuto(swerveDrive, claw, arm, wrist, SwerveDrive.headless));


    m_chooser.addOption("Mobility", new MobilityAuto(swerveDrive));
    m_chooser.addOption("Turn And Drive BETA", new TurnAndDrive(swerveDrive, 3, 180, 0.5, 0));
    m_chooser.addOption("Two Cube Auto BETA", new TwoCubeAuto(swerveDrive, arm, wrist, claw));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public SwerveDrive getSwerve() {
    return swerveDrive;
  }

  public Arm getArm() {
    return arm;
  }

  public XboxController getController1() {
    return m_xbox_cotroller;
  }

  public XboxController getController2() {
    return m_xbox_cotroller_2;

  }

  public Wrist getWrist() {
    return wrist;
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */

  private void configureButtonBindings() {
    //wrist.setDefaultCommand(new RunCommand(() -> wrist.setWristAngle(5), wrist));

    drive_robot = new SwerveController(swerveDrive,
        () -> {
          return -m_xbox_cotroller.getLeftY();
        },
        () -> {
          return -m_xbox_cotroller.getLeftX();
        },
        () -> {
          return -m_xbox_cotroller.getRightX();
        });

    new JoystickButton(m_xbox_cotroller, Button.kA.value)
        .onTrue(new InstantCommand(() -> {
          swerveDrive.setLocked(true);
        }))
        .onFalse(new InstantCommand(() -> {
          swerveDrive.setLocked(false);
        }));

    new JoystickButton(m_xbox_cotroller, Button.kY.value)
        .onTrue(new InstantCommand(() -> {
          SwerveDrive.headless = true;
          System.out.println("Headless orientation");
        }))
        .whileTrue(new RunCommand(() -> {
          if (rumble < 0.075 && rumble > -0.1) {
            m_xbox_cotroller.setRumble(RumbleType.kBothRumble, rumble);
            rumble += 0.001;
          } else {
            if (rumble > -1)
              SwerveDrive.m_gyro.zeroYaw();
            rumble = -1;
            m_xbox_cotroller.setRumble(RumbleType.kBothRumble, 0);

          }
        }))
        .onFalse(new InstantCommand(() -> {
          m_xbox_cotroller.setRumble(RumbleType.kBothRumble, 0);
          rumble = 0;
        }));

    // new JoystickButton(m_xbox_cotroller, Button.kX.value)

    new JoystickButton(m_xbox_cotroller, Button.kX.value)
        .onTrue(new InstantCommand(() -> {
          SwerveDrive.headless = false;
          System.out.println("Headed orientation");
        }));

    BooleanSupplier clawButtonPressedSupplier = () -> m_xbox_cotroller_2.getRightBumper();
    new JoystickButton(m_xbox_cotroller_2, Button.kRightBumper.value)
        .onTrue(new RunCommand(() -> {
          claw.toggleClaw();
        }).until(clawButtonPressedSupplier));/*
                                              * .withInterruptBehavior(InterruptionBehavior.kCancelSelf))
                                              * .onTrue(new RunCommand(()->{}));
                                              */

    // new JoystickButton(m_xbox_cotroller_2, Button.kA.value)
    // .whileTrue(new RunCommand(() -> {claw.clawClosed();}))
    // .onFalse(new RunCommand(() -> {claw.clawOpen();}));

    // m_xbox_cotroller.x(new EventLoop()).;
    new JoystickButton(m_xbox_cotroller, Button.kB.value)
        .onTrue(new InstantCommand(() -> {
          if (1 - m_xbox_cotroller.getRightTriggerAxis() < 1) {
            speedDampening.setDouble(1 - m_xbox_cotroller.getRightTriggerAxis());
          } else {
            speedDampening.setDouble(1);
          }
        }));

    // new JoystickButton(m_xbox_cotroller, Button.kLeftBumper.value)
    // .onTrue(new SequentialCommandGroup(new balance_alt(swerveDrive), new
    // balance_alt_support(swerveDrive)));

    BooleanSupplier lowerLimit = () -> {
      return limitSwitchLower.get();
    };
    new Trigger(lowerLimit).onFalse(new InstantCommand(() -> {
      arm.getArmEncoder().setPosition(0);
    }));

    // new JoystickButton(m_xbox_cotroller, Button.kRightBumper.value).whileTrue(new
    // TargetAlign(swerveDrive));
    // new JoystickButton(m_xbox_cotroller, Button.kBack.value).onTrue(new
    // TargetAlign(swerveDrive)); //window button (two rectangles)
    // This command schedules the drive_robot method
    // *** Makes the robot run ***
    swerveDrive.setDefaultCommand(drive_robot);

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    // Create some buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS

    new JoystickButton(m_xbox_cotroller_2, Button.kLeftBumper.value).onTrue(new InstantCommand(() -> led.toggleLED()));

    Command auto_balance = new SequentialCommandGroup(
        new MoveToRamp(swerveDrive).withInterruptBehavior(InterruptionBehavior.kCancelSelf),
        new ClimbRamp(swerveDrive).withInterruptBehavior(InterruptionBehavior.kCancelSelf),
        new BalanceAndEngage(swerveDrive).withInterruptBehavior(InterruptionBehavior.kCancelSelf)
        );

    // new JoystickButton(m_xbox_cotroller, Button.kStart.value).onTrue(new
    // EncoderDriveDistance(swerveDrive, 1, 0.5,
    // 0).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
    new JoystickButton(m_xbox_cotroller, Button.kStart.value)
        .whileTrue(auto_balance.withInterruptBehavior(InterruptionBehavior.kCancelSelf));

    new JoystickButton(m_xbox_cotroller, Button.kBack.value)
        .whileTrue(new ResetNavigation(swerveDrive).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

    // Stow angle
    new JoystickButton(m_xbox_cotroller_2, Button.kA.value).onTrue(new InstantCommand(() -> wrist.setWristAngle(120)));
    // Straight angle
    new JoystickButton(m_xbox_cotroller_2, Button.kB.value).onTrue(new InstantCommand(() -> wrist.setWristAngle(20)));
    new JoystickButton(m_xbox_cotroller_2, Button.kX.value).onTrue(new InstantCommand(() -> wrist.setWristAngle(50)));

  }

  /*
   * What Controller Button Does What!
   * Primary Controller:
   * -Joysticks- Moves the swerve drive
   * -A- Locks Wheels
   * -Y- Headless, hold y to reset 0 (theoretically)
   * -X- Head
   * -B and Right Trigger- Speed Dampener
   * -Left Bumper- Turn to object
   * -Right Bumper- Charging Station
   * -Window Button- Vision Distance
   * 
   * Secondary Controller:
   * -Left Joystick- Wrist
   * -Right Joystick- Arm
   * -Left Bumper-Drive to wall
   * -Right Bumper- Claw
   * -Left Bumper- LEDs
   * 
   * 
   * 
   * 
   */

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */

  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
    // return ArmTopAuto(claw, arm);
  }
}