// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands;
<<<<<<< HEAD

import edu.wpi.first.math.controller.PIDController;
=======
import javax.management.ConstructorParameters;

import com.fasterxml.jackson.databind.annotation.JsonAppend.Attr;

>>>>>>> e17e8548da3f6ac1506edd472a3d62a1a16d9bce
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import frc.robot.subsystems.SwerveDrive;

<<<<<<< HEAD
=======
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


>>>>>>> e17e8548da3f6ac1506edd472a3d62a1a16d9bce
public class balance extends CommandBase {
  private final SwerveDrive m_swerve;

  private final double max_speed = 0.2;
  private final double max_angle = 10;
  
  private final PIDController pidController = new PIDController(max_speed / max_angle, 0.02, 0.04);

<<<<<<< HEAD
  /** Creates a new balance. */
  public balance(SwerveDrive swerveDrive) {
    // Use addRequirements() here to declare subsystem dependencies.
    m_swerve = swerveDrive;
  }

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {}
=======
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    SwerveDrive m_drive;
    boolean hasTilted;
    float balanceTime = 0;
    int tolerance;
    public balance(SwerveDrive swerveDrive) {
        m_drive = swerveDrive;
        addRequirements(swerveDrive);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
>>>>>>> e17e8548da3f6ac1506edd472a3d62a1a16d9bce

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {
    double angle = m_swerve.getAngleFiltered();
    double speed = pidController.calculate(-angle);
    speed = Math.min(Math.max(speed, -max_speed), max_speed);
    m_swerve.setChassisSpeeds(speed, 0, 0);
  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {}

<<<<<<< HEAD
  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return false;
  }
=======
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        hasTilted = false;
        m_drive.setLocked(false);
        
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {

        m_drive.setChassisSpeeds(hasTilted ? calculateSpeed(SwerveDrive.m_gyro.getPitch()) : 0.1, calculateSpeed(SwerveDrive.m_gyro.getRoll()), 0);
        if ((Math.abs(SwerveDrive.m_gyro.getPitch()) >= tolerance && Math.abs(SwerveDrive.m_gyro.getRoll()) >= tolerance)) {
            hasTilted = true;
            balanceTime = 0;
        } else {
            balanceTime += 1;
        }
    }
    public double calculateSpeed(double angle){
        if (Math.abs(angle) < tolerance) {
            return 0;
        }
        return Math.copySign(0.1, angle);

        //return (angle /1800);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_drive.setLocked(true);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        
        return balanceTime >= 50 && hasTilted;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
>>>>>>> e17e8548da3f6ac1506edd472a3d62a1a16d9bce
}
